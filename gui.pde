/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void start_click(GButton source, GEvent event) { //_CODE_:start:783324:
  if (state == "menu")
    makecard();
  else if (state == "quiz"){
    start.setVisible(false);
    background(255);
    questsRightInaRow = 0;
    answerstreak += 1;
    next.setVisible(false);
    check.setVisible(true);
    submit.setVisible(false);
    countDownStart = cardlist.get(currentcard).timer;
    timerStart = int(millis()/1000);
    countDown  = countDownStart;
    runtimer = true;
    abletotype = true;
    user_answer = "Type answer";
    currentcard += 1;
  }
} //_CODE_:start:783324:

public void next_click(GButton source, GEvent event) { //_CODE_:next:685857:
  if (state == "make"){
    if (currentcard != numcard - 1){
      currentcard += 1;
      typingquestion = true;
    }
    diff_time.setValue(user_Cards.get(currentcard).timer);
  }
  else if (state == "study"){
    if (currentcard != numcard - 1)
      currentcard += 1;
  }
  else if (state == "quiz") {
    if (currentcard != cardlist.size() - 1)
      currentcard += 1;
    next.setVisible(false);
    check.setVisible(true);
    submit.setVisible(false);
    countDownStart = cardlist.get(currentcard).timer;
    timerStart = int(millis()/1000);
    countDown  = countDownStart;
    runtimer = true;
    abletotype = true;
    user_answer = "Type answer";
  }
} //_CODE_:next:685857:

public void previous_click(GButton source, GEvent event) { //_CODE_:previous:940897:
  if (currentcard != 0){
    typingquestion = true;
    currentcard -= 1;
  }
  diff_time.setValue(user_Cards.get(currentcard).timer);
} //_CODE_:previous:940897:

public void Remove_click(GButton source, GEvent event) { //_CODE_:Remove:730698:
  if (numcard != 1){
    user_Cards.remove(currentcard);
    numcard -= 1;
  }
  if (currentcard != 0)
    currentcard -= 1;
  else
    currentcard = 0;
} //_CODE_:Remove:730698:

public void Add_click(GButton source, GEvent event) { //_CODE_:Add:490421:
  numcard += 1;
} //_CODE_:Add:490421:

public void typemake_click1(GButton source, GEvent event) { //_CODE_:typemake:595480:
  if (typingquestion){
    typemake.setText("Type Question");
  }
  else{
    typemake.setText("Type Answer");
  }
   typingquestion = !typingquestion;
 
} //_CODE_:typemake:595480:

public void submit_click(GButton source, GEvent event) { //_CODE_:submit:709434:
  background(255);
  if (state.equals("make")){
    submit.setText("Quiz me!");
    studycards();
  }
    
  else if (state.equals("study")){
    startquiz();
    timerStart = int(millis()/1000);
    countDown  = countDownStart;
    submit.setText("Feedback");
  }
  
  else if (state.equals("quiz")){
    showrating();
  }
    
} //_CODE_:submit:709434:

public void diff_time_change(GSlider source, GEvent event) { //_CODE_:diff_time:358574:
  user_Cards.get(currentcard).timer = diff_time.getValueI();
} //_CODE_:diff_time:358574:

public void check_click(GButton source, GEvent event) { //_CODE_:check:467746:   
  runtimer = false;
  checkanswer();
  next.setVisible(true);
  check.setVisible(false);
  submit.setVisible(true);
    
} //_CODE_:check:467746:

// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  start = new GButton(this, 260, 350, 80, 30);
  start.setText("Start");
  start.addEventHandler(this, "start_click");
  next = new GButton(this, 500, 560, 80, 30);
  next.setText("Next");
  next.addEventHandler(this, "next_click");
  previous = new GButton(this, 20, 560, 80, 30);
  previous.setText("Previous");
  previous.addEventHandler(this, "previous_click");
  Remove = new GButton(this, 260, 560, 80, 30);
  Remove.setText("Remove Card");
  Remove.addEventHandler(this, "Remove_click");
  Add = new GButton(this, 140, 560, 80, 30);
  Add.setText("Add Card");
  Add.addEventHandler(this, "Add_click");
  typemake = new GButton(this, 380, 560, 80, 30);
  typemake.setText("Type Answer");
  typemake.addEventHandler(this, "typemake_click1");
  submit = new GButton(this, 500, 10, 80, 30);
  submit.setText("Submit");
  submit.addEventHandler(this, "submit_click");
  difficulty = new GLabel(this, 20, 15, 80, 30);
  difficulty.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  difficulty.setText("Difficulty of quesiton");
  difficulty.setOpaque(false);
  diff_time = new GSlider(this, 120, 10, 100, 40, 10.0);
  diff_time.setLimits(30, 20, 30);
  diff_time.setNbrTicks(3);
  diff_time.setStickToTicks(true);
  diff_time.setShowTicks(true);
  diff_time.setNumberFormat(G4P.INTEGER, 0);
  diff_time.setOpaque(false);
  diff_time.addEventHandler(this, "diff_time_change");
  hard = new GLabel(this, 100, 35, 50, 20);
  hard.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  hard.setText("Hard");
  hard.setOpaque(false);
  easy = new GLabel(this, 190, 35, 50, 20);
  easy.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  easy.setText("Easy");
  easy.setOpaque(false);
  check = new GButton(this, 260, 560, 80, 30);
  check.setText("Check");
  check.addEventHandler(this, "check_click");
}

// Variable declarations 
// autogenerated do not edit
GButton start; 
GButton next; 
GButton previous; 
GButton Remove; 
GButton Add; 
GButton typemake; 
GButton submit; 
GLabel difficulty; 
GSlider diff_time; 
GLabel hard; 
GLabel easy; 
GButton check; 
